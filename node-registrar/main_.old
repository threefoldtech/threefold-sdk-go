package main

import (
	"bytes"
	"crypto/ed25519"
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// Example for creating an account
func createAccountExample() (ed25519.PrivateKey, uint64, error) {
	// Generate key pair
	publicKey, privateKey, _ := ed25519.GenerateKey(nil)

	// Prepare request payload
	timestamp := time.Now().Unix()
	challenge := []byte(fmt.Sprintf("%d:%s", timestamp, base64.StdEncoding.EncodeToString(publicKey)))
	signature := ed25519.Sign(privateKey, challenge)

	reqBody := fmt.Sprintf(`{
		"timestamp": %d,
		"public_key": "%s",
		"signature": "%s"
	}`,
		timestamp,
		base64.StdEncoding.EncodeToString(publicKey),
		base64.StdEncoding.EncodeToString(signature),
	)

	// Send request
	resp, err := http.Post(
		"http://localhost:8080/v1/accounts",
		"application/json",
		strings.NewReader(reqBody),
	)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return nil, 0, err
	}
	var twinID uint64
	if resp != nil {
		defer resp.Body.Close()
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("Error reading response body:", err)
		} else {
			fmt.Println("Response received:", string(body))
			var account map[string]interface{}
			err = json.Unmarshal(body, &account)
			if err != nil {
				fmt.Println("Error unmarshalling response body:", err)
				return nil, 0, err
			}
			twinID = uint64(account["TwinID"].(float64))
		}
	} else {
		fmt.Println("No response received")
	}

	fmt.Println("TwinID:", twinID)
	return privateKey, twinID, nil
}

// Example for authenticating to access protected endpoint (e.g., update account)
func authenticatedRequestExample(twinID uint64, privateKey ed25519.PrivateKey) {
	client := &http.Client{}

	// Create authentication challenge
	timestamp := time.Now().Unix()
	challenge := []byte(fmt.Sprintf("%d:%v", timestamp, twinID))
	signature := ed25519.Sign(privateKey, challenge)

	// Create request
	req, _ := http.NewRequest(
		"PATCH",
		fmt.Sprintf("http://localhost:8080/v1/accounts/%v", twinID),
		strings.NewReader(`{"relays": ["relay.example.com"], "rmb_enc_key": "abc123"}`),
	)

	// Set auth header
	authHeader := fmt.Sprintf(
		"%s:%s",
		base64.StdEncoding.EncodeToString(challenge),
		base64.StdEncoding.EncodeToString(signature),
	)
	req.Header.Set("X-Auth", authHeader)
	req.Header.Set("Content-Type", "application/json")

	// Send request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}

	if resp != nil {
		defer resp.Body.Close()
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("Error reading response body:", err)
		} else {
			fmt.Println("Response received:", string(body))
		}
	} else {
		fmt.Println("No response received")
	}
}

// Get account
func getAccountExample(twinID uint64) {
	client := &http.Client{}

	// Create request
	req, _ := http.NewRequest(
		"GET",
		fmt.Sprintf("http://localhost:8080/v1/accounts/%v", twinID),
		strings.NewReader(""),
	)

	// Send request
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}

	if resp != nil {
		defer resp.Body.Close()
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("Error reading response body:", err)
		} else {
			fmt.Println("Response received:", string(body))
		}
	} else {
		fmt.Println("No response received")
	}
}

func createFarmExample(twinID uint64, privateKey ed25519.PrivateKey) (uint64, error) {
	client := &http.Client{}
	randString := func(length int) string {
		const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
		result := make([]byte, length)
		rand.Read(result)
		for i, b := range result {
			result[i] = chars[b%byte(len(chars))]
		}
		return string(result)
	}
	// Prepare farm payload
	farmData := struct {
		Name   string `json:"farm_name"`
		TwinID uint64 `json:"twin_id"`
	}{
		Name:   randString(20),
		TwinID: twinID,
	}

	body, _ := json.Marshal(farmData)

	// Create auth headers
	timestamp := time.Now().Unix()
	challenge := []byte(fmt.Sprintf("%d:%v", timestamp, twinID))
	signature := ed25519.Sign(privateKey, challenge)

	req, _ := http.NewRequest("POST", "http://localhost:8080/v1/farms", bytes.NewReader(body))

	// Set required headers
	authHeader := fmt.Sprintf(
		"%s:%s",
		base64.StdEncoding.EncodeToString(challenge),
		base64.StdEncoding.EncodeToString(signature),
	)
	req.Header.Set("X-Auth", authHeader)
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error: ", err)
		return 0, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)
		fmt.Println("farm creation failed: ", string(body))
		return 0, err
	}

	// Parse response
	var result struct {
		FarmID uint64 `json:"farm_id"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		fmt.Println("Error: ", err)
		return 0, err
	}

	return result.FarmID, nil
}

func registerNodeExample(twinID uint64, farmID uint64, privateKey ed25519.PrivateKey) error {
	client := &http.Client{}

	// Prepare node payload matching server's NodeRegistrationRequest
	nodeData := struct {
		TwinID    uint64 `json:"twin_id"`
		FarmID    uint64 `json:"farm_id"`
		Resources struct {
			CRU uint64 `json:"cru"`
			SRU uint64 `json:"sru"`
			HRU uint64 `json:"hru"`
			MRU uint64 `json:"mru"`
		} `json:"resources"`
		Location struct {
			Country   string `json:"country"`
			City      string `json:"city"`
			Longitude string `json:"longitude"`
			Latitude  string `json:"latitude"`
		} `json:"location"`
		Interfaces []struct {
			Name string `json:"name"`
			Mac  string `json:"mac"`
			IPs  string `json:"ips"`
		} `json:"interfaces"`
		SecureBoot   bool   `json:"secure_boot"`
		Virtualized  bool   `json:"virtualized"`
		SerialNumber string `json:"serial_number"`
	}{
		TwinID: twinID,
		FarmID: farmID,
		Resources: struct {
			CRU uint64 `json:"cru"`
			SRU uint64 `json:"sru"`
			HRU uint64 `json:"hru"`
			MRU uint64 `json:"mru"`
		}{CRU: 4, SRU: 512, HRU: 1024, MRU: 2048},
		Location: struct {
			Country   string `json:"country"`
			City      string `json:"city"`
			Longitude string `json:"longitude"`
			Latitude  string `json:"latitude"`
		}{
			Country:   "US",
			City:      "NY",
			Longitude: "-74.005974",
			Latitude:  "40.712776",
		},
		Interfaces: []struct {
			Name string `json:"name"`
			Mac  string `json:"mac"`
			IPs  string `json:"ips"`
		}{
			{
				Name: "eth0",
				Mac:  "00:11:22:33:44:55",
				IPs:  "192.168.1.2/24",
			},
		},
		SecureBoot:   true,
		Virtualized:  false,
		SerialNumber: "NODE-1234-ABCD",
	}

	body, _ := json.Marshal(nodeData)

	// Create auth headers
	timestamp := time.Now().Unix()
	message := fmt.Sprintf("%d:%v", timestamp, twinID)
	signature := ed25519.Sign(privateKey, []byte(message))

	req, _ := http.NewRequest("POST", "http://localhost:8080/v1/nodes", bytes.NewReader(body))

	// Set required headers
	req.Header.Set("X-Auth", fmt.Sprintf(
		"%s:%s",
		base64.StdEncoding.EncodeToString([]byte(message)),
		base64.StdEncoding.EncodeToString(signature),
	))
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("node registration failed: %s", string(body))
	}
	var result struct {
		NodeID uint64 `json:"node_id"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		fmt.Println("Error: ", err)
		return err
	}
	fmt.Println(result.NodeID)
	return nil
}

func main() {
	privateKey, twinID, err := createAccountExample()
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	authenticatedRequestExample(twinID, privateKey)
	getAccountExample(twinID)
	farmID, err := createFarmExample(twinID, privateKey)
	if err != nil {
		fmt.Println("Error creating farm:", err)
		return
	}
	fmt.Println("farm: ", farmID)
	err = registerNodeExample(twinID, farmID, privateKey)
	if err != nil {
		fmt.Println("Error registering node:", err)
		return
	}

}
