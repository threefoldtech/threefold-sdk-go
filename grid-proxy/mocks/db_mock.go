// Code generated by MockGen. DO NOT EDIT.
// Source: grid-proxy/internal/explorer/db/types.go
//
// Generated by this command:
//
//	mockgen -destination=grid-proxy/mocks/db_mock.go -source=grid-proxy/internal/explorer/db/types.go
//

// Package mock_db is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/threefoldtech/tfgrid-sdk-go/grid-proxy/internal/explorer/db"
	types "github.com/threefoldtech/tfgrid-sdk-go/grid-proxy/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteOldGpus mocks base method.
func (m *MockDatabase) DeleteOldGpus(ctx context.Context, nodeTwinIds []uint32, expiration int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldGpus", ctx, nodeTwinIds, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldGpus indicates an expected call of DeleteOldGpus.
func (mr *MockDatabaseMockRecorder) DeleteOldGpus(ctx, nodeTwinIds, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldGpus", reflect.TypeOf((*MockDatabase)(nil).DeleteOldGpus), ctx, nodeTwinIds, expiration)
}

// GetConnectionString mocks base method.
func (m *MockDatabase) GetConnectionString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetConnectionString indicates an expected call of GetConnectionString.
func (mr *MockDatabaseMockRecorder) GetConnectionString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionString", reflect.TypeOf((*MockDatabase)(nil).GetConnectionString))
}

// GetContract mocks base method.
func (m *MockDatabase) GetContract(ctx context.Context, contractID uint32) (db.DBContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", ctx, contractID)
	ret0, _ := ret[0].(db.DBContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockDatabaseMockRecorder) GetContract(ctx, contractID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockDatabase)(nil).GetContract), ctx, contractID)
}

// GetContractBills mocks base method.
func (m *MockDatabase) GetContractBills(ctx context.Context, contractID uint32, limit types.Limit) ([]db.ContractBilling, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractBills", ctx, contractID, limit)
	ret0, _ := ret[0].([]db.ContractBilling)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractBills indicates an expected call of GetContractBills.
func (mr *MockDatabaseMockRecorder) GetContractBills(ctx, contractID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBills", reflect.TypeOf((*MockDatabase)(nil).GetContractBills), ctx, contractID, limit)
}

// GetContracts mocks base method.
func (m *MockDatabase) GetContracts(ctx context.Context, filter types.ContractFilter, limit types.Limit) ([]db.DBContract, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContracts", ctx, filter, limit)
	ret0, _ := ret[0].([]db.DBContract)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContracts indicates an expected call of GetContracts.
func (mr *MockDatabaseMockRecorder) GetContracts(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockDatabase)(nil).GetContracts), ctx, filter, limit)
}

// GetContractsLatestBillReports mocks base method.
func (m *MockDatabase) GetContractsLatestBillReports(ctx context.Context, contractsIds []uint32, limit uint) ([]db.ContractBilling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsLatestBillReports", ctx, contractsIds, limit)
	ret0, _ := ret[0].([]db.ContractBilling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsLatestBillReports indicates an expected call of GetContractsLatestBillReports.
func (mr *MockDatabaseMockRecorder) GetContractsLatestBillReports(ctx, contractsIds, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsLatestBillReports", reflect.TypeOf((*MockDatabase)(nil).GetContractsLatestBillReports), ctx, contractsIds, limit)
}

// GetContractsTotalBilledAmount mocks base method.
func (m *MockDatabase) GetContractsTotalBilledAmount(ctx context.Context, contractIds []uint32) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsTotalBilledAmount", ctx, contractIds)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsTotalBilledAmount indicates an expected call of GetContractsTotalBilledAmount.
func (mr *MockDatabaseMockRecorder) GetContractsTotalBilledAmount(ctx, contractIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsTotalBilledAmount", reflect.TypeOf((*MockDatabase)(nil).GetContractsTotalBilledAmount), ctx, contractIds)
}

// GetFarm mocks base method.
func (m *MockDatabase) GetFarm(ctx context.Context, farmID uint32) (db.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarm", ctx, farmID)
	ret0, _ := ret[0].(db.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarm indicates an expected call of GetFarm.
func (mr *MockDatabaseMockRecorder) GetFarm(ctx, farmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarm", reflect.TypeOf((*MockDatabase)(nil).GetFarm), ctx, farmID)
}

// GetFarms mocks base method.
func (m *MockDatabase) GetFarms(ctx context.Context, filter types.FarmFilter, limit types.Limit) ([]db.Farm, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarms", ctx, filter, limit)
	ret0, _ := ret[0].([]db.Farm)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFarms indicates an expected call of GetFarms.
func (mr *MockDatabaseMockRecorder) GetFarms(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarms", reflect.TypeOf((*MockDatabase)(nil).GetFarms), ctx, filter, limit)
}

// GetHealthyNodeTwinIds mocks base method.
func (m *MockDatabase) GetHealthyNodeTwinIds(ctx context.Context) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthyNodeTwinIds", ctx)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHealthyNodeTwinIds indicates an expected call of GetHealthyNodeTwinIds.
func (mr *MockDatabaseMockRecorder) GetHealthyNodeTwinIds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthyNodeTwinIds", reflect.TypeOf((*MockDatabase)(nil).GetHealthyNodeTwinIds), ctx)
}

// GetLastNodeTwinID mocks base method.
func (m *MockDatabase) GetLastNodeTwinID(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastNodeTwinID", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNodeTwinID indicates an expected call of GetLastNodeTwinID.
func (mr *MockDatabaseMockRecorder) GetLastNodeTwinID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNodeTwinID", reflect.TypeOf((*MockDatabase)(nil).GetLastNodeTwinID), ctx)
}

// GetLastUpsertsTimestamp mocks base method.
func (m *MockDatabase) GetLastUpsertsTimestamp() (types.IndexersState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpsertsTimestamp")
	ret0, _ := ret[0].(types.IndexersState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUpsertsTimestamp indicates an expected call of GetLastUpsertsTimestamp.
func (mr *MockDatabaseMockRecorder) GetLastUpsertsTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpsertsTimestamp", reflect.TypeOf((*MockDatabase)(nil).GetLastUpsertsTimestamp))
}

// GetNode mocks base method.
func (m *MockDatabase) GetNode(ctx context.Context, nodeID uint32) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, nodeID)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockDatabaseMockRecorder) GetNode(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockDatabase)(nil).GetNode), ctx, nodeID)
}

// GetNodeTwinIDsAfter mocks base method.
func (m *MockDatabase) GetNodeTwinIDsAfter(ctx context.Context, twinID uint32) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeTwinIDsAfter", ctx, twinID)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeTwinIDsAfter indicates an expected call of GetNodeTwinIDsAfter.
func (mr *MockDatabaseMockRecorder) GetNodeTwinIDsAfter(ctx, twinID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeTwinIDsAfter", reflect.TypeOf((*MockDatabase)(nil).GetNodeTwinIDsAfter), ctx, twinID)
}

// GetNodes mocks base method.
func (m *MockDatabase) GetNodes(ctx context.Context, filter types.NodeFilter, limit types.Limit) ([]db.Node, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, filter, limit)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockDatabaseMockRecorder) GetNodes(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockDatabase)(nil).GetNodes), ctx, filter, limit)
}

// GetPublicIps mocks base method.
func (m *MockDatabase) GetPublicIps(ctx context.Context, filter types.PublicIpFilter, limit types.Limit) ([]types.PublicIP, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIps", ctx, filter, limit)
	ret0, _ := ret[0].([]types.PublicIP)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPublicIps indicates an expected call of GetPublicIps.
func (mr *MockDatabaseMockRecorder) GetPublicIps(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIps", reflect.TypeOf((*MockDatabase)(nil).GetPublicIps), ctx, filter, limit)
}

// GetRandomHealthyTwinIds mocks base method.
func (m *MockDatabase) GetRandomHealthyTwinIds(length int) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomHealthyTwinIds", length)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomHealthyTwinIds indicates an expected call of GetRandomHealthyTwinIds.
func (mr *MockDatabaseMockRecorder) GetRandomHealthyTwinIds(length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomHealthyTwinIds", reflect.TypeOf((*MockDatabase)(nil).GetRandomHealthyTwinIds), length)
}

// GetStats mocks base method.
func (m *MockDatabase) GetStats(ctx context.Context, filter types.StatsFilter) (types.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, filter)
	ret0, _ := ret[0].(types.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDatabaseMockRecorder) GetStats(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDatabase)(nil).GetStats), ctx, filter)
}

// GetTwins mocks base method.
func (m *MockDatabase) GetTwins(ctx context.Context, filter types.TwinFilter, limit types.Limit) ([]types.Twin, uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwins", ctx, filter, limit)
	ret0, _ := ret[0].([]types.Twin)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTwins indicates an expected call of GetTwins.
func (mr *MockDatabaseMockRecorder) GetTwins(ctx, filter, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwins", reflect.TypeOf((*MockDatabase)(nil).GetTwins), ctx, filter, limit)
}

// Initialized mocks base method.
func (m *MockDatabase) Initialized() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialized indicates an expected call of Initialized.
func (mr *MockDatabaseMockRecorder) Initialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockDatabase)(nil).Initialized))
}

// Ping mocks base method.
func (m *MockDatabase) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping))
}

// UpsertNetworkSpeed mocks base method.
func (m *MockDatabase) UpsertNetworkSpeed(ctx context.Context, speeds []types.Speed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNetworkSpeed", ctx, speeds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNetworkSpeed indicates an expected call of UpsertNetworkSpeed.
func (mr *MockDatabaseMockRecorder) UpsertNetworkSpeed(ctx, speeds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNetworkSpeed", reflect.TypeOf((*MockDatabase)(nil).UpsertNetworkSpeed), ctx, speeds)
}

// UpsertNodeDmi mocks base method.
func (m *MockDatabase) UpsertNodeDmi(ctx context.Context, dmis []types.Dmi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodeDmi", ctx, dmis)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodeDmi indicates an expected call of UpsertNodeDmi.
func (mr *MockDatabaseMockRecorder) UpsertNodeDmi(ctx, dmis any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodeDmi", reflect.TypeOf((*MockDatabase)(nil).UpsertNodeDmi), ctx, dmis)
}

// UpsertNodeFeatures mocks base method.
func (m *MockDatabase) UpsertNodeFeatures(ctx context.Context, features []types.NodeFeatures) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodeFeatures", ctx, features)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodeFeatures indicates an expected call of UpsertNodeFeatures.
func (mr *MockDatabaseMockRecorder) UpsertNodeFeatures(ctx, features any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodeFeatures", reflect.TypeOf((*MockDatabase)(nil).UpsertNodeFeatures), ctx, features)
}

// UpsertNodeHealth mocks base method.
func (m *MockDatabase) UpsertNodeHealth(ctx context.Context, healthReports []types.HealthReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodeHealth", ctx, healthReports)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodeHealth indicates an expected call of UpsertNodeHealth.
func (mr *MockDatabaseMockRecorder) UpsertNodeHealth(ctx, healthReports any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodeHealth", reflect.TypeOf((*MockDatabase)(nil).UpsertNodeHealth), ctx, healthReports)
}

// UpsertNodeIpv6Report mocks base method.
func (m *MockDatabase) UpsertNodeIpv6Report(ctx context.Context, ips []types.HasIpv6) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodeIpv6Report", ctx, ips)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodeIpv6Report indicates an expected call of UpsertNodeIpv6Report.
func (mr *MockDatabaseMockRecorder) UpsertNodeIpv6Report(ctx, ips any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodeIpv6Report", reflect.TypeOf((*MockDatabase)(nil).UpsertNodeIpv6Report), ctx, ips)
}

// UpsertNodeWorkloads mocks base method.
func (m *MockDatabase) UpsertNodeWorkloads(ctx context.Context, workloads []types.NodesWorkloads) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodeWorkloads", ctx, workloads)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodeWorkloads indicates an expected call of UpsertNodeWorkloads.
func (mr *MockDatabaseMockRecorder) UpsertNodeWorkloads(ctx, workloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodeWorkloads", reflect.TypeOf((*MockDatabase)(nil).UpsertNodeWorkloads), ctx, workloads)
}

// UpsertNodesGPU mocks base method.
func (m *MockDatabase) UpsertNodesGPU(ctx context.Context, gpus []types.NodeGPU) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNodesGPU", ctx, gpus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNodesGPU indicates an expected call of UpsertNodesGPU.
func (mr *MockDatabaseMockRecorder) UpsertNodesGPU(ctx, gpus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNodesGPU", reflect.TypeOf((*MockDatabase)(nil).UpsertNodesGPU), ctx, gpus)
}
